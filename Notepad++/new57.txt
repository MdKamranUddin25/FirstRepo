
mylist.stream.sorted -> asc

mylist.stream.sorted(Collections.reverse()) -> desc

mylist.stream.map(e->e.getName()).sorted(

mylist -> duplicate 10,30,80,10, 20,30
Set s=new HashSet();
mylist.stream.filter(n->!s.add(n)).collect  // to filter out the elements that are not added to the set

map(Int,Str)
1,Apple
2,Mango
3,Banana
4,Orange

myMap.stream.filter(m->m.valueSet().eic("Banana)).collect(Collectors.toMap());

@FunctionalInterface
interface Shape(){
void getArea(int length, int breadth);
}

int add = (a,b)->sum(a+b)


class Myshape implements Shape(){
public static void main(){
private int l;
private int b;
private int result;
Myshape(int l, int b){
}
void getArea(l,b){
int area=l*b;
}
result=getArea(5,4);
sysout(result);
}
}

string s="aabbbbcccdd"
string temp="";
char c[];
s.toCharArray(c);
for(char c;i<c.length();i++){
if((c[i].equals([i+1])){
count=1;
temp=c[i].concat(c[i]);
}
}

string s="abbcddd"
string temp=""
int count=0
char c[]
s.toCharArray(c)
for(char c;i<c.length;i++){
if(c[i].equals(c[i+1]))
count=count+1
char temp=c[i]; //reject values
else
if(
temp=c[i] //a,
count=0
sysout(temp)


